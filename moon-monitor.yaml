# This is an example of deploying moon-monitor microservice.
#
# Assumptions:
# 1) Moon is running in "moon" namespace
# 2) Prometheus is deployed using prometheus-operator
# 3) Prometheus is running in "monitoring" namespace

apiVersion: v1
kind: ServiceAccount
metadata:
  name: moon-monitor
  namespace: monitoring
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: moon-monitor
  namespace: moon
rules:
  - apiGroups:
      - ""
    resources:
      - pods
      - resourcequotas
    verbs:
      - get
      - watch
      - list
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: moon-monitor
  namespace: moon
roleRef:
  kind: Role
  name: moon-monitor
  apiGroup: rbac.authorization.k8s.io
subjects:
  - kind: ServiceAccount
    name: moon-monitor
    namespace: monitoring
---
kind: Service
apiVersion: v1
metadata:
  name: moon-monitor
  namespace: monitoring
  labels:
    app: moon-monitor
spec:
  selector:
    app: moon-monitor
  ports:
    - name: metrics
      port: 8080
---
# This custom resource from prometheus-operator is actually fetching the data
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: moon-monitor
  namespace: monitoring
  labels:
    release: prometheus-operator
spec:
  selector:
    matchLabels:
      app: moon-monitor
  endpoints:
    - port: metrics
      interval: 15s
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: moon-monitor
  namespace: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: moon-monitor
  template:
    metadata:
      labels:
        app: moon-monitor
    spec:
      serviceAccountName: moon-monitor
      containers:
        - name: moon-monitor
          image: aerokube/moon-monitor:1.9.6
          args:
            - -namespace # -namespace flag specifies namespace where Moon is running
            - moon
          ports:
            - name: metrics
              containerPort: 8080
